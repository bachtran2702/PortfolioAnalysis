---
title: "SP500"
author: "Bach Tran"
date: "2025-04-05"
output: html_document
---

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r setup, echo = F}
library(dplyr)
library(htmlwidgets)
library(PerformanceAnalytics)
library(xts)
library(quantmod)
library(ggplot2)
library(lubridate)
library(dygraphs)

#theme of the graphs
theme_project = chartTheme("white", bg.collbackground ="transparent")
```
## Including Plots

You can also embed plots, for example:

```{r importing data, echo = F}
#sp500
start = Sys.Date() - days(360)
end = Sys.Date()-2

getSymbols("^SPX", src = "yahoo",from = start, to = end)

# Plot the data
a = chartSeries(SPX,
            theme = theme_project,
            name = "S&P 500 Charting",  
            TA = list("addBBands(n = 15)",
                      "addVo()",
                      "addEMA(20)",
                      "addEMA(10, col = 2)")) 

# To weekly frequency from daily
sp500_weekly = to.weekly(SPX)
head(sp500_weekly, n =6)

#interactive chart
SPX_dy = SPX[ ,c(1:3,6)]


#create bollinger bands
SPX_dy$SMA15 = SMA(Cl(SPX), n = 15) #Moving Average
SPX_dy = SPX_dy[-c(1:14),]

p = dygraph(SPX_dy, xlab = "Date", ylab = "Price", main = "SPY Price") %>%
  dySeries("SPX.Open", label = "Open", color = "black") %>%
  dySeries("SPX.Low", label = "Low", color = "blue") %>%
  dySeries("SPX.High", label = "High", color = "purple") %>%
  dySeries("SPX.Adjusted", label = "Close", color = "black") %>%
  dySeries("SMA15", label = "SMA15", color = "orange", strokePattern = "dashed") %>%
  dyRangeSelector() %>%
  dyCandlestick()%>%
  dyCrosshair(direction = "vertical") %>%
  dyHighlight(highlightCircleSize = 3, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = T)  %>%
  dyRoller(rollPeriod = 1)
p

#Bollinger Bands Data frame
SPX_dya = SPX_dy
SPX_dya$sd = rollapply(SPX_dya$SMA15, width = 15, FUN = sd) #15SMA Standard Deviation 
SPX_dya = SPX_dya[-c(1:14),]
SPX_dya$b.lower = SPX_dya$SMA15 - SPX_dya$sd*2#bollinger lower band
SPX_dya$b.upper = SPX_dya$SMA15 + SPX_dya$sd*2#bollinger upper band
SPX_dya = SPX_dya[,c(4,5,7,8)]


#Bollinger Graph
q = dygraph(SPX_dya, xlab = "Date", ylab = "Price", main = "SPY Price and Bollinger Band") %>%
  dySeries("SPX.Adjusted", label = "Close", color = "darkgreen") %>%
  dySeries("SMA15", label = "SMA15", color = "orange", strokePattern = "dashed")%>%
  dySeries(c("b.lower", "SMA15" , "b.upper"),strokePattern = "dashed") %>%
  dyRangeSelector()
q


# sp500_returns using adj.close
sp500_returns = Return.calculate(sp500_weekly[,6])
sp500_returns = sp500_returns[-1,]
plot.zoo(sp500_returns)

# Returns table
table.CalendarReturns(sp500_returns)

# Arith mean of returns
mean(sp500_returns)

# Geometric mean of returns
mean.geometric(sp500_returns)

# Standard deviation
sd(sp500_returns)


```


```{knitt standalone dygraph}


```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
