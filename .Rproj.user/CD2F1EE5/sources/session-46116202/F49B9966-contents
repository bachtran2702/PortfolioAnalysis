```{r setup, echo = F, warning = FALSE, message = FALSE, results = 'hide'}
library(dplyr)
library(htmlwidgets)
library(PerformanceAnalytics)
library(xts)
library(quantmod)
library(ggplot2)
library(lubridate)
library(dygraphs)

#theme of the graphs
theme_project = chartTheme("white", bg.collbackground ="transparent")
#sp500
start = Sys.Date() - days(360)
end = Sys.Date()-2

getSymbols("^SPX", src = "yahoo",from = start, to = end)
```
```{r importing data, echo = F, warning = FALSE, message = 'hide'}
#interactive chart
SPX_dy = SPX[ ,c(1:3,6)]


#create bollinger bands
SPX_dy$SMA15 = SMA(Cl(SPX), n = 15) #Moving Average
SPX_dy = SPX_dy[-c(1:14),]

p = dygraph(SPX_dy, xlab = "Date", ylab = "Price") %>%
  dySeries("SPX.Open", label = "Open", color = "black") %>%
  dySeries("SPX.Low", label = "Low", color = "blue") %>%
  dySeries("SPX.High", label = "High", color = "purple") %>%
  dySeries("SPX.Adjusted", label = "Close", color = "black") %>%
  dySeries("SMA15", label = "SMA15", color = "orange", strokePattern = "dashed") %>%
  dyRangeSelector() %>%
  dyCandlestick()%>%
  dyCrosshair(direction = "vertical") %>%
  dyHighlight(highlightCircleSize = 3, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = T)  %>%
  dyRoller(rollPeriod = 1)
p

#Bollinger Bands Data frame
SPX_dya = SPX_dy
SPX_dya$sd = rollapply(SPX_dya$SMA15, width = 15, FUN = sd) #15SMA Standard Deviation 
SPX_dya = SPX_dya[-c(1:14),]
SPX_dya$b.lower = SPX_dya$SMA15 - SPX_dya$sd*2#bollinger lower band
SPX_dya$b.upper = SPX_dya$SMA15 + SPX_dya$sd*2#bollinger upper band
SPX_dya = SPX_dya[,c(4,5,7,8)]

#Bollinger Graph
q = dygraph(SPX_dya, xlab = "Date", ylab = "Price") %>%
  dySeries("SPX.Adjusted", label = "Close", color = "darkgreen") %>%
  dySeries("SMA15", label = "SMA15", color = "orange", strokePattern = "dashed")%>%
  dySeries(c("b.lower", "SMA15" , "b.upper"),strokePattern = "dashed") %>%
  dyRangeSelector()
q
```

```{r, fig.width=4, fig.height=1,background: transparent, message = FALSE, results = 'hide', warning=F, echo = F}
# create a list of dygraphs objects
plotobj <- list(p,q)

# render the dygraphs objects using htmltools
htmltools::browsable(htmltools::tagList(plotobj))
```

